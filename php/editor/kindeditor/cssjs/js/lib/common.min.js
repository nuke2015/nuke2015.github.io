var helper = {
    config_autoload: {
        welcome_box: 1,
        kefu_box: 1,
    },
    cookie: function(name, value, options) {
        if (typeof value != 'undefined') { // name and value given, set cookie
            options = options || {};
            if (value === null) {
                value = '';
                options.expires = -1;
            }
            var expires = '';
            if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {
                var date;
                if (typeof options.expires == 'number') {
                    date = new Date();
                    date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));
                } else {
                    date = options.expires;
                }
                expires = '; expires=' + date.toUTCString(); // use expires attribute, max-age is not supported by IE
            }
            var path = options.path ? '; path=' + options.path : '';
            var domain = options.domain ? '; domain=' + options.domain : '';
            var secure = options.secure ? '; secure' : '';
            document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');
        } else { // only name given, get cookie
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
    },
    jlog: function(obj) {
        var log = JSON.stringify(obj);
        // 以json格式打日志
        console.log(log);
        return log;
    },
    isWeiXin: function() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.match(/MicroMessenger/i) == "micromessenger") {
            return true;
        } else {
            return false;
        }
    },
    array_merge: function(a, c) {
        // 数组合并,从c&&a的并集
        var d = {},
            b;
        for (b in a) d[b] = a[b];
        for (b in c) d[b] = c[b];
        return d
    },
    /***
     * 本地化存储数据，
     * @param key   string类型
     * @param obj   存储非函数类型的对象，不深度拷贝
     * @private
     */
    _store: function(key, obj) {
        var value;
        // 因为open_id和手机号是关系断开的,所以,暂时用localstorage忽悠一下.
        //优先使用localstorege,其次使用cookie,
        if (window.localStorage) {
            if (obj) {
                if (typeof obj == "object") {
                    window.localStorage.setItem(key, JSON.stringify(obj));
                } else if (typeof obj == "string") {
                    window.localStorage.setItem(key, obj);
                } else {
                    alert("_storeByBrowser:你存储的是非对象");
                }
            } else {
                try {
                    value = JSON.parse(window.localStorage.getItem(key));
                } catch (e) {
                    return window.localStorage.getItem(key);
                }
            }
        } else { //使用cookie
            if (!document.cookie || document.cookie == '') {
                //alert('请设置您的浏览器支持cookie以便正常访问');暂时放空
                if (obj) {
                    value = TQ._store(key, obj);
                } else {
                    value = TQ._store(key);
                }
            } else {
                if (obj) {
                    if (typeof obj == "object") {
                        value = TQ.cookie(key, JSON.stringify(obj));
                    } else if (typeof obj == "string") {
                        value = TQ.cookie(key, obj);
                    } else {
                        alert("_storeByBrowser:你存储的是非对象");
                    }
                } else {
                    try {
                        value = JSON.parse(TQ.cookie(key));
                    } catch (e) {
                        value = TQ.cookie(key);
                    }
                }
            }
        }
        return value;
    },
    str2Args: function(query, split) {
        var args = {};
        query = query || '';
        split = split || '&';
        var pairs = query.split(split);
        for (var i = 0; i < pairs.length; i++) {
            var pos = pairs[i].indexOf('=');
            if (pos == -1) {
                continue;
            }
            var argname = pairs[i].substring(0, pos).replace(/amp;/, "");
            var value = pairs[i].substring(pos + 1);
            args[argname] = decodeURIComponent(value);
        }
        return args;
    },
    getProtocol: function() {
        if (helper.isHttps()) {
            return "https"
        }
        return "http";
    },
    isMobile: function(phone) {
        // 手机号正则
        var reg = /^1[3-9][0-9]\d{8}$/;
        if (reg.test(phone)) {
            return true;
        }
        return false;
    },
    isEmpty: function(v) {
        switch (typeof v) {
            case 'undefined':
                return true;
            case 'string':
                if (v.replace(/(^[ \t\n\r]*)|([ \t\n\r]*$)/g, '').length == 0) return true;
                break;
            case 'boolean':
                if (!v) return true;
                break;
            case 'number':
                if (0 === v || isNaN(v)) return true;
                break;
            case 'object':
                if (null === v || v.length === 0) return true;
                for (var i in v) {
                    return false;
                }
                return true;
        }
        return false;
    },
    dateToTimeStamp: function(stringTime) {
        //var stringTime = "2014-07-10 10:21:12";
        if (stringTime) {
            var timestamp1 = Date.parse(new Date(stringTime));
            timestamp2 = timestamp1 / 1000;
            //2014-07-10 10:21:12的时间戳为：1404958872
        } else {
            timestamp2 = 0;
        }
        return timestamp2;
    },
    get_device_type: function() {
        var u = navigator.userAgent.toLowerCase();
        return {
            android: u.indexOf('android') > -1 || u.indexOf('linux') > -1,
            iPhone: u.indexOf('iphone') > -1 || u.indexOf('mac') > -1,
            iPad: u.indexOf('ipad') > -1, //是否iPad
        };
    },
    subStringCn: function(str, len, hasDot) {
        // 截取多余的字符串
        var newLength = 0;
        var newStr = "";
        var chineseRegex = /[^\x00-\xff]/g;
        var singleChar = "";
        var strLength = str.replace(chineseRegex, "**").length;
        for (var i = 0; i < strLength; i++) {
            singleChar = str.charAt(i).toString();
            if (singleChar.match(chineseRegex) != null) {
                newLength += 2;
            } else {
                newLength++;
            }
            if (newLength > len) {
                break;
            }
            newStr += singleChar;
        }
        if (hasDot && strLength > len) {
            newStr += "...";
        }
        return newStr;
    },
    page_jump: function(page) {
        uri = location.href;
        // 去掉#
        if (uri.indexOf("#") != -1) {
            uri = uri.replace(/#/g, "");
        }
        // 去页码
        uri = uri.replace(/[&+]page=[\d]+/g, '');
        //  带尾巴
        if (uri.indexOf("?") != -1) {
            uri += "&page=" + page;
        } else {
            uri += "?page=" + page;
        }
        location.href = uri;
    },
    js_append: function(url_t) {
        var hm = document.createElement("script");
        hm.src = url_t;
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(hm, s);
    },
    loading: function() {
        if ($("body").has(".loading").length == 0) {
            $('body').append('<div class="loading"></div>');
        }
    },
    _reachBottom: function() {
        //瀑布流滚动加载
        var clientHeight = 0;
        var scrollHeight = 0;
        if (document.documentElement && document.documentElement.scrollTop) {
            scrollTop = document.documentElement.scrollTop;
        } else if (document.body) {
            scrollTop = document.body.scrollTop;
        }
        if (document.body.clientHeight && document.documentElement.clientHeight) {
            clientHeight = (document.body.clientHeight < document.documentElement.clientHeight) ? document.body.clientHeight : document.documentElement.clientHeight;
        } else {
            clientHeight = (document.body.clientHeight > document.documentElement.clientHeight) ? document.body.clientHeight : document.documentElement.clientHeight;
        }
        scrollHeight = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
        if (scrollTop + clientHeight + 100 > scrollHeight && clientHeight != scrollHeight) {
            return true;
        } else {
            return false;
        }
    }
};
// 自动加载行为定制
var autoload = (function() {
    "undefined" != typeof config_autoload && (helper.config_autoload = helper.array_merge(helper.config_autoload, config_autoload));
})(autoload);
// 全局变量
var t_paramsArr = window.location.href.split("?");
var g_paramsStr = t_paramsArr.length > 1 ? t_paramsArr[1] : "";
var g_params = helper.str2Args(g_paramsStr, "&");
var g_userId = "";
var g_host_api = '//' + location.hostname;
// 初始化
var identity = helper._store("identity") || {};
var global_param = helper._store("global_param") || {};
if (!helper.isEmpty(g_params.platform)) {
    // 指定平台标识
    var platform = 0;
    platform = parseInt(g_params.platform);
    global_param.platform = platform;
    helper._store("global_param", global_param);
}
// 物理存储
console.info(global_param);
// 异步请求
var doRequestwithnoheader = function(req, handler, errorHandler) {
    if (req) {
        // 注入自然指纹
        var identityObj = helper._store("identity");
        if (!helper.isEmpty(identityObj)) {
            req.admin_id = identityObj.admin_id;
            req.token = identityObj.token;
        } else {
            req.admin_id = "";
        }
        // 全局参数,有则注入
        var global_param = helper._store('global_param');
        req = helper.array_merge(req, global_param);
    }
    // 最新版本号
    req.version = '2.01';
    req.ajax = 1;
    console.info("req:", req);
    $.ajax({
        type: 'post',
        url: g_host_api,
        data: req,
        async: true,
        dataType: 'json',
        success: function(res) {
            if (res && res.code == 0) {
                handler(res);
            } else {
                console.log('resp:', res);
                // 如果是错误的指纹,需要清指纹,并重新登陆
                if (res.code == 10001) {
                    helper._store('identity', {});
                    helper.gotoLogin();
                }
                errorHandler(res);
            }
        },
        error: function(xhr, type) {
            if (errorHandler) {
                errorHandler(xhr, type);
                return;
            }
            alert('网络请求失败，请稍后再试!');
        }
    });
};
//模板相关定制
template.openTag = '{{';
template.closeTag = '}}';