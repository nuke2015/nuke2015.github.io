
推送接口:
客户端启动访问>jpush/reg进行绑定,客户端手动点退出>jpush/remove进行解绑,服务端访问>yezhu/zxxq推送装修需求相关内容.其实极光服务有java的sdk,所以,消息中心可以直接对接极光服务,无须调用php网关.但是之前java端没时间搞,所以,改成php做转发网关.

推送流程:
当消息中心产生内容后>往php网关发http进行推关>php收到后,根据用户id去库查registerID>查到后,使用极光sdk把相关消息推到极光网关.由极光负责使用推送协议,把相关内容推到客户端.

代码架构:
推送服务端入口jpush.php,推送服务客户端入口index.php.之所以区分两个入口主要原因是:
1.服务端入口,出于安全考虑必须部署在内网,同时通信密码不可泄露.所以,要单独一个入口.
2.客户端入口,出于安全考虑,避免跨用户越权,所以,必须在用户登陆之后才进行绑定,绑定的同时需要校验token值,土巴兔的app在用户登陆的时候,有授权校验,所以要部署在index.php就是和土巴兔app接口一起认证.
3.服务端的扩展,在action下直接派生控制器即可,其它模型设定,根据需求而定.
4.jpush-api-php-client-3.2.1这个目录是极光官方的sdk衍生代码,之前主要是希望使用极光最新的sdk,避免短期内sdk的频繁升级,导致服务不稳定.所以,选用极光sdk进行开发,但是因为它使用了命名空间,各种调用很丑陋,于是对它进行了小小封装.但是后来极光推出了RESTful的api,各种调用都更加简单.如果有可能,尽快切换到RESTful的直接调用上.因为它的升级与维护都相对简单.
5.极光官方的sdk封装不友好,因为android与ios有部分参数不一样,调用方式差别很大,所以,才封装了android与ios两个子类,分别对平台进行适应.推荐做法是:使用curl调用RESTful的api进行交互,各种参数都是json格式的,各方法可以单独封装.

推送注意:
1.android只有一个证书,所以,测试环境使用的也是外网的证书,在测试的时候,可以自己另开账号测试,测试ok后,再传到测试环境.
2.ios区分测试环境与开发环境,开发环境可以自由测试.外网测试的话必须勾选单设备推送.要根据客户商使用的不同证书,来切换服务端参数,服务端jpush.php有个apns_production设置为true就是外网证书.
3.推送客户端的开发主要由客户端同学和极光对接,就是如果客户端在极光后台手动推送能成功,说明,客户端对接是成功的,推送服务端的开发,也是后台单独和极光对接.如果服务端发起的推送,在极光后台能看到API日志,说明服务端对接成功.当服务端和客户端都与极光对接成功,才开始联调.
4.极光封装的sdk调用了一个monolog类,它会产生所有的消息记录,其实这只是在开发的过程中有用到,其它时候是不需要的.

推送目前存在的问题:
1.推送区分单播与群播,群播是一次性的,没有限制,单播是有频率限制的.所以,如果后面业务量飙升,可能需要对消息进行队列处理,分量分批发送.目前已知是一分钟内600条.感觉这个阈值比较触发.
2.推送服务目前没有做自动重推.这也区分几种情况a.如果消息中心发起推送请求,但是php网关暂时不可用,推送失败.b.如果php向极光发起推送请求,极光网关暂时不可用,推送失败.c.极光往客户端进行推送时,如果客户端绑定并在线,直接成功;如果客户端绑定但不在线,极光会8小时后进行尝试重推一次;如果客户端没绑定,直接失败.因为目前的设定是:用户如果手动选择退出登陆,就不能收到装修需求相关的推送.如果用户是强制结束客户端进程的方式,是可以正常收到推送的.因为强制结束进程没有触发jpush/remove的解绑行为.所以,它的极光设备号还是和用户ID一一对应的.

推送的前景应用:
1.用推送做组播,比如按城市做分组,新开设落地城市的时候,单独对城市进行活动推送,快速抢占市场.按用户阶层做分组,比如,对别墅用户推送五星装修保服务.
2.后台推送,就是用推触发一个后台事件,不弹提示,配合在线客服系统,实时沟通实时客服,低成本切入即时通信领域.

推送日志:
monolog_jpush_20150403.txt这些是接口被调用时出错的日志.
jpush_20150403.log这些是极光官方sdk的日志.


