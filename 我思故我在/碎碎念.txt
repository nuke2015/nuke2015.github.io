
类的继承与封闭装,目地是为了提高代码的可维护性,
比如类有公共属性public $this->nickname,
然后每个调用的类都可以直接修改它,但是修改的方式不同,
如果需要在昵称处理中加一个过滤函数,
那直接是类属性的方式就不好统一了,
但如果有getter和setter就方便多了,这是从java学来的.

RESTful相关,
关于版本控制,
如果变化比较大,就启用新版本,v2/controller/index.php.
如果变化能兼容,就在旧的基础上,修复bug.
关于路由,
实现一是htaccess伪静态[seo友好],实现二是pathinfo()[简写,原始路径];
关于响应:
json/xml/html/txt/jsonp视需求而定.
关于令牌表单:
生成token,存入session,然后下发到form,然后,提交表单校验token,然后销毁token
关于RBAC角色授权
创建路由节点表,创建用户和用户组,创建授权对应表.
用户访问>得到路由节点>读取授权对应表>按用户/用户组判断是否有权限
用户详情>授权管理>勾选节点>把节点与用户/用户组信息存入授权对应表.
可以根据,用户或用户组,做匹配判断,或禁用判断.
关键取决于路由节点本身(业务需求).

关于性能测试
要从真实的业务场景出发,而不是hello world+hello world

