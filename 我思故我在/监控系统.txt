
监控系统

设计目标:
    在不同的业务场景中,埋点收集相关的性能数据,比如,接口调用耗时和请求次数.然后上报监控中心,对相关数据进行统计分析,重点是对数据进行实时监测,若发现异常即时告警,告警渠道有微信,短信,邮件等.

主要难点:
    数据量大,就像移动接口被访问,每次访问接口的同时,都会触发其它的调用,比如mysql,redis,mongo等.如何收集数据是个很有挑战性的问题.
    时效性要求高,监控统计不像其它的用户行为统计,可以延迟查看.监控的目地,就是要在第一时间内发现服务异常,同时触发警报,但又不是分分钟的异常都要告警,而是设置一个阈值,只有达到了阈值才触发警报,如何实现监控的时效性,就是个现实问题了.
    报表多样化,因为所有的监控数据并不是独立展现的,所以,需要进行二次处理.

设计过程:
如何收集数据?
    业务数据就像心跳一样,它每时每刻都在发生,填充速度非常快,所以,我们采取了个折中的办法,就是把数据精确到分钟级别,就是一分钟以内的请求在入库前做自我汇总,然后才上报mongo库.
如何异步收集数据?
    因为业务本身是没有监控的需求的,监控需求是运维方提出的,所以,监控这件事是必须实现的,但是它的实现不能影响业务的本身,最低限度,即便加了监控服务会变慢,但也不能慢太多,于是我们必须采用异步的办法收集数据.
异步的方案有哪些?
    之前考查了几中办法,共享内存,消息队列,信号量.
    a.因为信号量这种方式存在竞争关系,它适合做拍卖活动,并不适合我们当前的业务场景.所以不采用.
    b.共享内存的方式,因为它本质上走的是php的c扩展.dll,所以,对平台的适应性不好,在win下测试,读取,只能一次性,感觉不稳定.在linux下测试,就是它必须依附于主进程,比如,读写脚本放在nginx进程后,那么用shell去读是读不出来的.脚本用shell写入,用shell读取是正常的.但是很多业务并不走shell的,所以不能直接用shell写内存.再者php始终是做web服务的,如果用来操作内存感觉有点过了.
    c.消息队列.这种操作方式在shell与cgi两种方式都正常.但是,在处理跨语言的时候遇到了障碍,就是它本质上是php对socket的封装,但它并不是开源的通用实现,所以,如果让python的同学或java的同学也去做个同样的封装不好对话.
    d.webserver实现.这种方式主要是写个进程监听内127.0.0.1某端口,因为它是自我监听,所以,不会占用外部带宽.如果用nodejs或golang去实现,它还能做成异步非阻塞的.这就能极大的降低架构成本,因为不需要每种语言都去封装,只需要往某端口发送json格式的数据就可以了,数据发送之后可以立即返回,其它的入mongo库可以异步实现,如果是golang监听,还可启用长链接.
    e.写文件的方式,这种方式的主要特点是,简单快.任何一种语言都能写文件.但它最致命的问题是,容易造成死锁.比如,数据上报脚本正在读取日志,但监控脚本又刚好在写日志.那就阻塞了.总不能读到一半,又退出来进行写操作,再去读另一半吧?虽然有各种歪办法实现,但是感觉架构的东西没必要这么绕.我们用了一个最简单的办法实现,就是各业务分别对应自己的日志,避免业务间死锁.读写分离,把日志文件改名给上报脚本读取,读与写相分离,互相不碰撞.
    f.后面发现有其它的消息实现形式也挺优秀的,比如,rabitMQ,ZeroMQ,感觉这才是靠谱的实现方式.同时这也是最接近我们d方案的行业实现.

报表展现形式.
    如何展示数据?
    比如,监控请求次数与接口耗时,它们的数据值相差很大,放在一块展现没有意义,所以分别展示.但有些是需要同时展现的,比如,把redis,mongo,mysql的耗时放在一张图里展现,就能对比它们的稳定性,都是数据库服务,这种对比有参考价值.报表形式不一样,导致了数据存储结构就不一样.因为要大量使用分类汇总功能.所以选用mongo库,因为它性能更好.因为是数据分类展示,所以选用mongo聚合功能.
    如何查看同一时间点,各种调用的情况?因为不同的监控,数据量是不一样的,为了让它们的曲线在每个时间点都有对应.我们根据时间轴,对数据进行零填充,这样产生的曲线就比较平滑.在同一时间有对比参照作用.

监控告警.
    有两种触发方式,1.触发条件比较简单的可以放在采集上报脚本做触发.2.触发条件比较复杂的,比如,计算双曲线的振幅然后触发,这种建议是写个定时脚本另外异步的计算mongo数据,然后触发.在采集脚本做触发非常快非常有效,但是它在架构上很糟糕.因为采集脚本本身,是不能停下来的,但发送告警邮件,又相对是比较耗时的操作,容易卡死.另一个问题就是,如果对告警条件进行维护,就会影响采集脚本的运行.所以,在架构上要把它们分离并独立出来.

